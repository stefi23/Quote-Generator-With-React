{"version":3,"sources":["Components/QuoteGenerator.js","Components/CurrentDateAndTime.js","App.js","serviceWorker.js","index.js"],"names":["quotes","QuoteGenerator","props","generateQuote","setState","i","length","quoteGenerated","state","this","className","onClick","Component","CurrentDateAndTime","tic","now","Date","date","getDate","month","getMonth","year","getFullYear","hours","getHours","minutes","getMinutes","seconds","getSeconds","day","getDay","time","timerID","setInterval","size","color","PureComponent","App","React","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+SAIMA,G,MAAS,CACX,+HAEA,0HAEA,oKAEF,0FAEA,+EACA,6QAqDaC,E,YAhDf,WAAYC,GAAO,IAAD,8BAClB,4CAAMA,KAONC,cAAgB,WAChB,EAAKC,UAAS,YAAY,IAATC,EAAQ,EAARA,EACdA,IAAML,EAAOM,SAChBD,EAAI,GAGJ,IAAME,EAAiBP,EAAOK,GAG9B,MAAO,CACPA,IAHAA,EAIAE,sBAjBA,EAAKC,MAAQ,CACbD,eAAgB,GAChBF,EAAG,GAJe,E,sEAyBT,IAAD,EACoBI,KAAKD,MAA1BD,EADC,EACDA,eADC,EACeF,EAGvB,OACA,yBAAKK,UAAU,yCAEX,yBAAKA,UAAU,QACf,yBAAKA,UAAU,uCACnB,yBAAKA,UAAU,yBAAyBH,GAAkCP,EAAO,IACzE,4BAAQU,UAAU,wBACjBC,QAAUF,KAAKN,eADhB,yB,GApCqBS,aCmDdC,G,kBA5DX,WAAYX,GAAO,IAAD,8BACd,4CAAMA,KAeVY,IAAM,WACH,EAAKV,UAAS,WACb,IAAMW,EAAM,IAAIC,KACVC,EAAOF,EAAIG,UACXC,EAAQJ,EAAIK,WAAa,EACzBC,EAAON,EAAIO,cACXC,EAAQR,EAAIS,WACZC,EAAUV,EAAIW,aACdC,EAAUZ,EAAIa,aACdC,EAAMd,EAAIe,SAIhB,MAAO,CACHb,KAAK,GAAD,OAJS,CAAC,SAAU,SAAU,UAAW,YAAa,WAAY,SAAU,YAI9DY,GAAd,aAAuBZ,EAAvB,YAA+BE,EAA/B,YAAwCE,GAC5CU,KAAK,GAAD,OAAKR,EAAL,YAAcE,EAAd,YAAyBE,QA7BlC,EAAKnB,MAAQ,CACZS,KAAM,MACNc,KAAM,OAJQ,E,iFASG,IAAD,OAChBtB,KAAKuB,QAAUC,aACb,kBAAM,EAAKnB,QACX,O,+BA4BG,IAAD,EACgBL,KAAKD,MAAlBS,EADH,EACGA,KAAKc,EADR,EACQA,KACZ,OACI,yBAAKrB,UAAU,QACX,yBAAKA,UAAU,OACf,yBAAKA,UAAU,uBACdO,IAGD,yBAAKP,UAAU,OACf,yBAAKA,UAAU,kCACdqB,IAGD,wBAAIG,KAAK,KAAKC,MAAM,e,GA3DHC,kBCclBC,G,uLATX,OACE,yBAAK3B,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GANU4B,IAAM1B,YCMJ2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.200fa91b.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport './QuoteGenerator.css';\n\n\nconst quotes = [\n    ' \"When you arise in the morning think of what a privilege it is to be alive, to think, to enjoy, to love..\" Marcus Aurelius ',\n\n    '\"Courage doesn’t mean you don’t get afraid. Courage means you don’t let fear stop you.\" Bethany Hamilton',\n\n    '\"Before an intimidating conversation, I always remind myself that I will be the same person before and after the conversation, no matter the outcome.\" Olivia Fay',\n  \n  '“Life shrinks or expands in proportion to one s courage.” – Anaïs Nin',\n  \n  '\"The time is always right to do what is right.\" —Martin Luther King Jr.',\n  '“The only truly safe thing you can do is to try over and over again. To go for it, to get rejected, to repeat, to strive, to wish. Without rejection there is no frontier, there is no passion, and there is no magic.” ― James Altucher, Choose Yourself'\n\n];\n\nclass QuoteGenerator extends Component {\nconstructor(props){\nsuper(props)\nthis.state = {\nquoteGenerated: '',\ni: 1\n}\n}\n\ngenerateQuote = () => {\nthis.setState(( {i} ) => {\nif(i === quotes.length){\ni = 0;\n}\n\nconst quoteGenerated = quotes[i]\ni++;\n    \nreturn {\ni,\nquoteGenerated,\n}\n\n});\n}\n\nrender(){\nconst {quoteGenerated, i} = this.state\n// const quoteGenerated = this.state.quoteGenerated;\n\nreturn(\n<div className=\"content text-center position-relative\">\n   \n    <div className=\"row \">\n    <div className=\"col-10 offset-1 p-4 rounded-corners\" >\n<div className=\"mb-4 text-white quote\">{quoteGenerated ? quoteGenerated : quotes[0]}</div>\n        <button className=\"btn button !important\" \n         onClick ={this.generateQuote}>Generate Quote       \n        </button>\n      </div>\n      </div> \n</div>\n\n)\n}\n\n}\n\n\nexport default QuoteGenerator;","import React, { PureComponent } from 'react'\nimport './CurrentDateAndTime.css';\n\n\nclass CurrentDateAndTime extends PureComponent {\n    // state = {\n    //     date: 'day',\n    //     time: 'Now'\n    // }\n    constructor(props){\n        super(props);\n       this.state = {\n        date: 'day',\n        time: 'Now'\n       }\n    \n    }\n    \n    componentDidMount() {\n        this.timerID = setInterval(\n          () => this.tic(),\n          1000\n        );\n      }\n\n    tic = () => {\n       this.setState(() => {\n        const now = new Date ();\n        const date = now.getDate();\n        const month = now.getMonth() + 1;\n        const year = now.getFullYear();\n        const hours = now.getHours();\n        const minutes = now.getMinutes();\n        const seconds = now.getSeconds();\n        const day = now.getDay();\n        const weekDays = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n\n\n        return {\n            date: `${weekDays[day]}| ${date}/${month}/${year}`,\n            time: `${hours}:${minutes}:${seconds}`\n        }\n        // day/month/year\n       }) \n    }\n    \n//day / month / year\n// current live hour and minutes\n\n    render(){\n        const {date,time} = this.state;\n        return(\n            <div className=\"pt-5\">\n                <div className='row'>\n                <div className='col-6 offset-3 date'>\n                {date}  \n                </div>\n                </div>\n                <div className='row'>\n                <div className='col-6 offset-3 text-white time'>\n                {time}    \n                </div>\n                </div>\n                <hr size=\"30\" color=\"white\" /> \n            </div>\n        )\n    }\n};\n\nexport default CurrentDateAndTime;","import React from 'react';\nimport QuoteGenerator from './Components/QuoteGenerator.js'\nimport CurrentDateAndTime from './Components/CurrentDateAndTime.js'\n\nimport './App.css';\n\nclass App extends React.Component {\n\n  render(){\n    return (\n      <div className=\"App\">\n        <CurrentDateAndTime />\n        <QuoteGenerator/>\n        </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}